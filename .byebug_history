exit
@candidate_tiles.class
exit
@candidate_tiles.to_a.first.int
step
int_arg
step
@candidate_tiles.to_a.first.int
@int
@candidate_tiles.to_a.map {|tile| [tile.x_axis, tile.y_axis]}
@candidate_tiles.to_a.count
@candidate_tiles.map {|tile| tile.int_possibilities}
@candidate_tiles.map {|tile| [tile.int]}
@int
@candidate_tiles.map {|tile| [tile.x_axis, tile.y_axis]}
continue
@int
@candidate_tiles.map {|tile| [tile.x_axis, tile.y_axis]}
continue
@candidate_tiles.map {|tile| tile.int_possibilities}
@candidate_tiles.map {|tile| [tile.x_axis, tile.y_axis]}
@candidate_tiles.count
exit
@progress
step
@tiles.map {|tile| tile.int}
@candidate_tiles.map {|tile| tile.int}
step
@candidate_tiles.map {|tile| tile.int}
step
@solved
@candidate_tiles.count
exit
@tiles.map {|tile| [tile.x_axis, tile.y_axis]}
@tiles.map {|tile| [tile.x_axis, tile.y_axis]
@tiles.first.board.print_board
@tiles.first.print_board
self.ninegroup.class
self.class
step
exit
array_or_set_of_ints_to_be_removed
continue
$int_poss = @int_possibilities
array_or_set_of_ints_to_be_removed
@int_possibilities
continue
@int_possibilities
array_or_set_of_ints_to_be_removed
continue
array_or_set_of_ints_to_be_removed
continue
$int_poss
@board.print_board
array_or_set_of_ints_to_be_removed
continue
$int_poss = @int_possibilities
step
$int_poss
array_or_set_of_ints_to_be_removed
continue
$int_poss = @int_possibilities
@int_possibilities
step
@board.print_board
array_or_set_of_ints_to_be_removed
continue
@int_possibilities
step
array_or_set_of_ints_to_be_removed
continue
@int_possibilities
array_or_set_of_ints_to_be_removed
exit
step
array_or_set_of_ints_to_be_removed
@int_possibilities
where
self.y_axis
self.x_axis
where
continue
@ninegroup.class
continue
@ninegroup.class
exit
@tiles.map {|tile| tile.int}
exit
(@tiles - @candidate_tiles).map {|tile| tile.int}
@candidate_tiles.map {|tile| tile.int}
@candidate_tiles.map {|tile| tile.int
@candidate_tiles.count
@candidate_tiles
exit
self.ninegroup.class
self.class
exit
bar.tiles.map {|tile| tile.int}
bar.class
bar
exit
bar.count
exit
bar.count
exit
mc.class
mc
@mustcontains.select {|mc| mc.int == 9}
@mustcontains.count
@mustcomtains.count
   220:     end
   219:       mc.is_a?(InnerSquare) && mc.int == 9
bar = @mustcontains.select do |mc|
   220:     end
   219:       mc.is_a?(InnerSquare) && mc.int == 9
bar = @mustcontains.select do |mc|
bar.count
exit
(@mustcontains.select {|mc| mc.ninegroup.is_a?(InnerSquare)}).count
(@mustcontains.select {|mc| mc.is_a?(InnerSquare)}).count
(@mustcontains.select {|mc| mc.is_a?(InnerSquare)}).count == 81
exit
@ninegroup.x_axis_range
@ninegroup.class
@tiles.map {|tile| tile.int}
exit
continue
exit
@board.print_board
exit
foo.map {|tile| tile.int}
@foo.map {|tile| tile.int}
foo = @board.tiles.select {|tile| @x_axis_range === tile.x_axis && @y_axis_range === tile.y_axis}
@tiles.map {|tile| tile.int}
exit
(@tiles.find {|tile| tile.x_axis == 5 && tile.y_axis == 5})
@tiles.map {|tile| tile.x_axis}
exit
@tiles.map {|tile| tile.x_axis}
exit
@tiles.map {|tile| tile.x_axis}
exit
@tiles.map {|tile| tile.x_axis}
@tiles.map {|tile| tile.int}
exit
@tiles.find {|tile| tile.x_axis == 5 && tile.y_axis == 5}
exit
@tiles.map {|tile| tile.int}
@tiles.find {|tile| tile.x_axis == 5 && tile.y_axis == 5}
@tiles.map {|tile| tile.x_axis}
exit
@tiles.map {|tile| tile.x_axis}
@tiles.map {|tile| tile.int}
@tiles.first.board.print_board
@tiles.first.board.display_board
@tiles.first.board.display
!!@tiles.first.board
@board
exit
@tiles.map {|tile| tile.int}
@int
@tiles.find {|tile| tile.int == @int}
exit
@solved
@solved?
exit
exit'
!!@tiles.find {|tile| tile.int.to_i == 6}
!!@tiles.find {|tile| tile.int.to_s == 6}
!!@tiles.find {|tile| tile.int == 6}
!!@tiles.find {|tile| tile.int == @int}
@tiles.map {|tile| tile.int_possibilities}
@tiles.map {|tile| tile.int}
exit
progress
exit
continue
progress
continue
progress
continue
progress
continue
progress
continue
progress
continue
progress
continue
progress
continue
progress
continue
progress
continue
progress
continue
progress
continue
step
progress
exit
progress
exit
foo.select! {|bar| bar < 2}
foo = [0, 1]
foo.select! {|bar| bar > 0}
require_relative('./ConnectFour.rb')
require_relative './ConnectFour.rb'
irb
exit
print_board
(relevant_mc.tiles.select {|tile| tile.int_possibilities.include?(6)}).count
(relevant_mc.select {|tile| tile.int_possibilities.include?(6)}).count
relevant_mc = includes_sbs.find {|mc| mc.object_id == 7218560}
includes_sbs.map {|mc| [mc.object_id.to_s, mc.tiles.map {|tile| "X" + tile.x_axis.to_s + " Y" + tile.y_axis.to_s}]}
includes_sbs.select! {|mc| mc.int == 6}
includes_sbs = @mustcontains.select {|mc| mc.tiles.include?(shouldbesix)}
shouldbesix = @tiles.find {|tile| tile.x_axis == 5 && tile.y_axis == 4}
exit
(relevant_mc.tiles.select {|tile| tile.int_possibilities.include?(6)}).count
(relevant_mc.select {|tile| tile.int_possibilities.include?(6)}).count
relevant_mc.tiles.map {|tile| "X" + tile.x_axis.to_s + " Y" + tile.y_axis.to_s}
relevant_mctiles.map {|tile| "X" + tile.x_axis.to_s + " Y" + tile.y_axis.to_s}
relevant_mc.tiles.count
relevant_mc.tile.count
relevant_mc.int
relevant_mc.tiles.include?(shouldbesix)
relevant_mc = includes_sbs.find {|mc| mc.object_id == 20884100}
includes_sbs.map {|mc| [mc.object_id.to_s, mc.tiles.map {|tile| "X" + tile.x_axis.to_s + " Y" + tile.y_axis.to_s}]}
includes_sbs.map {|mc| mc.object_id.to_s + mc.tiles.map {|tile| "X" + tile.x_axis.to_s + " Y" + tile.y_axis.to_s}}
print_board
includes_sbs.map {|mc| mc.tiles.map {|tile| "X" + tile.x_axis.to_s + " Y" + tile.y_axis.to_s}}
includes_sbs.count
relevant_mc = includes_sbs.find {|mc| mc.tiles.include?(four_tile)}
relevant_mc = includes_sbs.find {|mc| mc.include?(four_tile)}
four_tile = @tiles.find {|tile| tile.x_axis == 4 && tile.y_axis == 6}
print_board
includes_sbs.select! {|mc| mc.int == 6}
print_board
includes_sbs.count
includes_sbs = @mustcontains.select {|mc| mc.tiles.include?(shouldbesix)}
includes_sbs.count
includes_sbs = @mustcontains.find {|mc| mc.tiles.include?(shouldbesix)}
self.print_board
shouldbesix.int_possibilities
shouldbesix = @tiles.find {|tile| tile.x_axis == 5 && tile.y_axis == 4}
exit
exit'
[foobar].find {|f| f.tiles == (f.tiles.select {|t| t.x_axis == 5}).to_set}
(foobar.tiles).count
(foobar.tiles.select {|t| t.x_axis == 5}).count
(foobar.tiles.select {|t| t.x_axis == 5}}).count
[foobar].find {|f| f.tiles == f.tiles.select {|t| t.x_axis == 5}}
foobar.tiles.map {|t| t.x_axis}
foobar.tiles.map {|tile| t.x_axis}
